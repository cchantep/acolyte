// -*- mode: scala -*-
package #PKG#

import java.lang.{ Boolean => JBool }
import java.util.{ ArrayList, List => JList, Map => JMap }

/** Scala implementation of RowList#N#. */
#CLA#
private[acolyte] class ScalaRowList#N#[#TC#](#CV#, rows: JList[Row#N#[#TC#]], colNames: JMap[String, Integer], colNullables: JMap[Integer, JBool], cycling: Boolean) extends RowList#N#[#TC#, ScalaRowList#N#[#TC#]] {

  lazy val factory: RowList#N#.Factory[#TC#, ScalaRowList#N#[#TC#]] =
    new RowList#N#.Factory[#TC#, ScalaRowList#N#[#TC#]]() {
      def rowList(#CA#, rows: JList[Row#N#[#TC#]], colNames: JMap[String, Integer], colNullables: JMap[Integer,JBool], cycling: Boolean): ScalaRowList#N#[#TC#] = new ScalaRowList#N#[#TC#](#CC#, rows, colNames, colNullables, cycling)
    }

  def isCycling(): Boolean = cycling

  /** Rows */
  lazy val getRows: JList[Row#N#[#TC#]] = rows

  /** Column labels */
  lazy val getColumnLabels: JMap[String, Integer] = colNames

  /** Column nullables */
  lazy val getColumnNullables: JMap[Integer, JBool] = colNullables

  /** Column classes */
  lazy val getColumnClasses: JList[Class[_]] = {
    val list: JList[Class[_]] = new ArrayList[Class[_]]()
    #AC#
    list
  }

  /**
   * Defines column label(s) per position(s) (> 0).
   *
   * `rowList.withLabels(1 -> "label1", 2 -> "label2")`
   */
  def withLabels(labels: (Int, String)*): ScalaRowList#N#[#TC#] =
    labels.foldLeft(this) { (l, t) => l.withLabel(t._1, t._2) }
  #EXTRA#
}
