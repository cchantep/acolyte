// -*- mode: java -*-
package #PKG#;

import java.util.Collections;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Row list of row with #N# cell.
 *
 * @author Cedric Chantepie
 */
#CLA#
public abstract class RowList#N#<#CP#,UPDATED extends RowList#N#<#CP#,?>> 
    extends RowList<Row#N#<#CP#>> {

    #AGS#

    /**
     * Returns row list factory.
     */
    abstract Factory<#CP#, UPDATED> factory();

    /**
     * Append column values.
     * #PD#
     * @return New list of rows with the given one appended to
     * @see #append(acolyte.jdbc.Row#N#)
     */
    public UPDATED append(#AP#) {
        return append(new Row#N#<#CP#>(#AV#));
    } // end of append

    /**
     * {@inheritDoc}
     * @deprecated Use append operation with multiple column values.
     */
    @Deprecated
    protected UPDATED append(final Row#N#<#CP#> row) {
        final ArrayList<Row#N#<#CP#>> copy = new ArrayList<Row#N#<#CP#>>(getRows());
            
        copy.add(row);

        return factory().rowList(#GC#, copy, getColumnLabels(), getColumnNullables());
    } // end of append

    /**
     * {@inheritDoc}
     */
    public UPDATED withLabel(final int columnIndex, final String label) {
        if (label == null) {
            throw new IllegalArgumentException("Invalid label");
        } // end of if

        // ---

        final HashMap<String,Integer> cols = 
            new HashMap<String,Integer>(getColumnLabels());

        cols.put(label, (Integer) columnIndex);

        return factory().rowList(#GC#, getRows(), cols, getColumnNullables());
    } // end of withLabel

    /**
     * {@inheritDoc}
     */
    public UPDATED withNullable(final int columnIndex, final boolean nullable) {
        final HashMap<Integer,Boolean> nls = 
            new HashMap<Integer,Boolean>(getColumnNullables());

        nls.put(columnIndex, nullable);

        return factory().rowList(#GC#, getRows(), getColumnLabels(), nls);
    } // end of withNullable

    // --- Inner classes ---

    /**
     * Row list factory.
     */
    static interface Factory<#CP#, ROWLIST extends RowList#N#<#CP#,?>> {

        /**
         * Build row list, including |rows| with given column |labels|.
         *
         * @param nullables Nullable flags.
         */
        public ROWLIST rowList(#CS#, final List<Row#N#<#CP#>> rows, final Map<String,Integer> labels, final Map<Integer,Boolean> nullables);

    } // end of interface Factory

    /**
     * Row list implementation.
     */
    public static final class Impl<#CP#> extends RowList#N#<#CP#,Impl<#CP#>> {
        // --- Properties ---
        
        /**
         * Rows
         */
        final List<Row#N#<#CP#>> rows;
        
        /**
         * Column names
         */
        final Map<String,Integer> colNames;

        /**
         * Nullable flags
         */
        final Map<Integer,Boolean> colNullables;

        #PS#

        /**
         * Column classes
         */
        private final List<Class<?>> colClasses;

        // --- Constructors ---

        /**
         * Bulk constructor.
         *
         * @throws IllegalArgumentException if rows is null
         */
        Impl(#CS#, final List<Row#N#<#CP#>> rows, final Map<String,Integer> colNames, final Map<Integer,Boolean> colNullables) {

            #IC#

            if (rows == null) {
                throw new IllegalArgumentException("Invalid rows");
            } // end of if

            if (colNames == null) {
                throw new IllegalArgumentException("Invalid names");
            } // end of if

            if (colNullables == null) {
                throw new IllegalArgumentException("Invalid nullable flags");
            } // end of if

            this.rows = Collections.unmodifiableList(rows);
            this.colNames = Collections.unmodifiableMap(colNames);
            this.colNullables = Collections.unmodifiableMap(colNullables);

            // Column classes
            final ArrayList<Class<?>> colClasses = new ArrayList<Class<?>>();

            #AC#

            this.colClasses = Collections.unmodifiableList(colClasses);
        } // end of <init>

        /**
         * No-arg constructor.
         */
        Impl(#CS#) {
            this(#CA#, new ArrayList<Row#N#<#CP#>>(), new HashMap<String,Integer>(), new HashMap<Integer,Boolean>());
        } // end of <init>

        // ---

        #GS#

        /**
         * {@inheritDoc}
         */
        RowList#N#.Factory<#CP#, Impl<#CP#>> factory() {
            return new RowList#N#.Factory<#CP#,Impl<#CP#>>() {
                public Impl<#CP#> rowList(#CS#, final List<Row#N#<#CP#>> rows, final Map<String,Integer> colNames, final Map<Integer,Boolean> colNullables) {
                    return new Impl(#PSC#, rows, colNames, colNullables);
                }
            };
        } // end of factory

        /**
         * {@inheritDoc}
         */
        public List<Row#N#<#CP#>> getRows() { return this.rows; }
        
        /**
         * {@inheritDoc}
         */
        public Map<String,Integer> getColumnLabels() { return this.colNames; }

        /**
         * {@inheritDoc}
         */
        public List<Class<?>> getColumnClasses() { return this.colClasses; }

        /**
         * {@inheritDoc}
         */
        public Map<Integer,Boolean> getColumnNullables() { return this.colNullables; }
    } // end of class Impl
} // end of class RowList#N#
